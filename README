Couchrest is a loose port of the couch.js library from CouchDB’s Futon admin interface, which I find to be concise, clear, and well designed.

I prefer to stay close to the metal, especially when the metal is as clean and simple as CouchDB’s HTTP API. The main thing Couchrest does for you is manage the Ruby <=> JSON serialization, and point your actions (database creation, document CRUD, view creation and queries, etc) at the appropriate API endpoints.

The core of Couchrest is Heroku’s excellent REST Client Ruby HTTP wrapper. REST Client takes all the nastyness of Net::HTTP and gives is a pretty face, while still giving you more control than Open-URI. I recommend it anytime you’re interfacing with a well-defined API. (We use it for Grabb.it’s Tumblr integration, and it works like a charm.)

The most complete source of documentation are the spec files. To ensure that your environment is setup for successful CouchRest operation, from the project root directory run `autotest` or `spec spec` (requires RSpec and optionally ZenTest for autotest support). 

Quick Start:

@cr = CouchRest.new("http://localhost:5984")
@db = @cr.create_db('couchrest-test')
response = @db.save({:key => 'value', 'another key' => 'another value'})
doc = @db.get(response['id'])
puts doc.inspect


Bulk Save:

@db.bulk_save([
    {"wild" => "and random"},
    {"mild" => "yet local"},
    {"another" => ["set","of","keys"]}
  ])
puts @db.documents.inspect # returns ids and revs of the current docs

Creating and Querying Views:

@db.save({
  "_id" => "_design/first", 
  :views => {
    :test => {
      :map => "function(doc){for(var w in doc){ if(!w.match(/^_/))emit(w,doc[w])}}"
      }
    }
  })
puts @db.view('first/test')['rows'].inspect 


